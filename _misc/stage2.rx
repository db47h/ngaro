( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Ok, at this point the new image should be in control so we have a normal,   )
( though brutally minimal Retro system from here on.                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

: :doc keepString last @ d->doc ! ;
" ( $- ) attach documentation string to latest defined function" :doc


( Stack Words ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: nip   (  xy-y    ) swap drop ;
" ( xy-y ) Drop the NOS from the stack" :doc

: rot   ( xyz-yzx  ) [ swap ] dip swap ;
" ( xyz-yzx ) Rotate the top three values on the stack" :doc

: tuck  (  xy-yxy  ) swap over ;
" ( xy-yxy ) Put a copy of TOS under NOS" :doc

: +!    (  na-     ) [ @ + ] sip ! ;
" ( na- ) Add value to value at address" :doc

: -!    (  na-     ) [ @ swap - ] sip ! ;
" ( na- ) Subtract value from value at address" :doc

: ++    (   a-     ) 1 swap +! ;
" ( a- ) Increment variable by 1" :doc

: --    (   a-     ) 1 swap -! ;
" ( a- ) Decrement variable by 1" :doc

: ?dup  (   n-n || n-nn )  dup 0; ;
" ( -n ) Duplicate TOS if non-zero. If zero, leave value alone" :doc

( Scope ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create list  ( -a )  0 , 0 ,

: {{ ( - )  vector off last @ dup list !+ ! ;
" ( - ) Start a namespace (private portion)" :doc

: ---reveal--- ( - ) vector on last @ list 1+ ! ;
" ( - ) Switch to public portion of a namespace" :doc

: }} ( - )
  vector on list @+ swap @ ==
  [ list @ last ! ]
  [ list @ [ last repeat @ dup @ list 1+ @ != 0; drop again ] do ! ] if ;
" ( - ) Close a namespace, sealing off private symbols" :doc

( Vectored Execution ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: devector  ( "-  ) ' 0; :devector ;
" ( ``- ) Same as **:devector**, but parses for name of function" :doc

: is        ( a"- ) ' 0; :is ;
" ( a``- ) Same as **:is**, but parses for name of function" :doc

: default:  ( "-  ) ' 2 + , ; ' .macro last @ d->class !
" ( ``- ) Compile call to default definition of a function, ignoring any revectoring" :doc

: HEADERS   (  -n ) 32 ;
" ( -n ) Returns number of private headers permitted" :doc

{{
  : scratch  ( -a )
    memory @       STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch )
    STRING-BUFFERS STRING-LENGTH * -  ( buffers )
    HEADERS dup STRING-LENGTH * swap 3 * + -  ( headers ) ;

  create next  0 ,
  create split 0 ,

  [ split @
    [ heap @ [ next @ heap ! default: header heap @ next ! ] dip heap ! here last @ d->xt ! ]
    [ default: header ] if ] is header

  create z
     999 , 999 , 0 ,

  [ split  on scratch next ! default: {{           z header ] is {{
  [ split off                default: ---reveal---          ] is ---reveal---
  [ split off                default: }}                    ] is }}
}}

( Dictionary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  create a 0 , create b 0 , create c 0 , create xt 0 ,
  : skim       ( a-a )
    last repeat @ over over d->xt @ == [ nip 0 ] ifTrue 0; again ;
  : getHeaders ( $-  )
    xt ! 0 a ! 0 b ! 0 c !
    last repeat @ 0; dup d->xt @ xt @ == [ dup b ! @ a ! 0 ] [ -1 ] if 0; drop dup c ! again ;
  : <hide>     ( a-  ) getHeaders b @ 0; drop a @ c @ ! ;
---reveal---
  : d'         ( "-a ) ' drop which @ ;
  " ( ``-a ) Parse for a name and return the dictionary header corresponding to it" :doc

  : xt->d      ( a-d || a-0 ) dup skim over over == [ - ] [ nip ] if ;
  " ( a-d ) Given an address, return the corresponding dictionary header or 0 if not found" :doc

  : :hide      ( a-  )
    dup xt->d last @ == [ drop last @ @ last ! ] [ <hide> ] if ;
  " ( a- ) Remove a name from a dictionary. Specify the address of a function. Used by **hide**" :doc

  : hide       ( "-  ) ' 0; :hide ;
  " ( ``- ) Remove a name from the dictionary" :doc
}}
hide list
hide vector

: reclass      (  a- ) last @ d->class ! ;
" ( a- ) Change class of most recent function to specified class" :doc

: reclass:     ( a"- ) d' d->class ! ;
" ( a``- ) Same as **reclass**, but parse for function to change class of" :doc

( Initial Prefixes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : xt:class ( a-aa ) dup xt->d 0; d->class @ withClass ;
---reveal---
  : __&  ( a-a ) .data                  ; &.macro reclass
  " ( a-a ) Prefix; returns address of a variable or function" :doc

  : __@  ( a-n ) xt:class &@  xt:class  ; &.macro reclass
  " ( a-n ) Prefix; execute function or data element and fetch from addres returned" :doc

  : __!  ( na- ) xt:class &!  xt:class  ; &.macro reclass
  " ( na- ) Prefix; execute function or data element and store value to address returned" :doc

  : __+  ( na- ) xt:class &+! .word     ; &.macro reclass
  " ( na- ) Prefix; execute function or data element and add value to value at address returned" :doc

  : __-  ( na- ) xt:class &-! .word     ; &.macro reclass
  " ( na- ) Prefix; execute function or data element and subtract value from value at address returned" :doc

  : __2  ( a-  ) &xt:class sip xt:class ; &.macro reclass
  " ( a- ) Prefix; execute function twice" :doc
}}

( Classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .compiler    (  a- ) @compiler &do &drop if ;
" ( a- ) Class for functions that can only be used inside a definition" :doc

: immediate    (   - ) &.macro reclass ;
" ( - ) Set the most recent function to **.macro** class" :doc

: compile-only (  "- ) &.compiler reclass ;
" ( ``- ) Set the most recent function to **.compiler** class" :doc

( Remap some classes for efficiency and safety ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
here
{{
  : c: ( "- ) &.compiler reclass: ;
  c: pop    c: push   c: 0;     c: ;;    c: ;      c: repeat c: again
}}
!heap

( Compiler Macros ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: `     ( "-  )
  ' ?dup 0 != -1 ==
  [ .data @which @d->class , ]
  [  tib isNumber? -1 ==
    [ tib toNumber .data &.data , ] &notFound if ] if ; compile-only
" ( ``- ) Either execute a function, or compile the xt  and a call to the corresponding class         handler. This will also work with numbers" :doc

: jump: ( "- ) ' 0; 8 , , ; compile-only
" ( ``- ) Compile a jump to another function" :doc

( Additional Combinators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: []      (    -    ) ` [ ` ] ; immediate
" ( - ) Empty quote" :doc

: while   (   q-    ) [ repeat dup dip swap 0; drop again ] do drop ;
" ( q- ) Execute quote until quote returns a flag of" :doc

: until   (   q-    ) [ repeat dup dip swap not 0; drop again ] do drop ;
" ( q- ) Execute quote until quote returns a flag of -1" :doc

: curry   (  nq-q   ) [ [ ` [ ] dip .data ] dip , ` ] ;
" ( nq-q ) 5 [ . ]   =  [ 5 [ . ] do ]" :doc

: take    (  qq-q   ) swap [ [ ` [ ] dip , ] dip .data ` ] ;
" ( qq-q ) 5 [ . ]   =  [ [ . ] do 5 ]" :doc

: bi      (  xqq-   ) &sip dip do ;
" (  xqq- ) Apply each quote to a copy of x" :doc

: bi*     ( xyqq-   ) &dip dip do ;
" ( xyqq- ) Apply q1 to x and q2 to y" :doc

: bi@     (  xyq-   ) dup bi* ;
" (  xyq- ) Apply q to x and y" :doc

: tri     ( xqqq-   ) [ &sip dip sip ] dip do ;
" ( xqqq- ) Apply each quote to a copy of x" :doc

: tri*    ( xyzqqq- ) [ [ swap &dip dip ] 2dip ] dip do ;
" ( xyzqqq- ) Apply q1 to x, q2 to y, and q3 to z" :doc

: tri@    ( xyzq-   ) 2dup tri* ;
" ( xyzq- ) Apply q to x, y, and z" :doc

: cons    (  ab-q   ) 2push ` [ 2pop &.data bi@ ` ] ;
" ( ab-q ) Create a quote returning two data elements" :doc

: preserve ( aq-    ) swap &@ sip [ &do dip ] dip ! ;
" ( aq- ) Given a variable (a) and a quote (q), preserve the contents of (a) while executing  the quote, and restore the original contents  of (a) after execution completes. (a) is removed from the stack before (q) is executed." :doc

: when    (  nqq-n  )
  [ over swap do ] dip swap
  [ do -1 ] [ drop 0 ] if 0; pop 2drop ;
" ( nqq-n ) Execute q1, with a copy of n on the stack.\n\nIf q1 returns a true flag, run q2 and exit the caller.\n\nIf not, discard q2 and return to the  caller.\n\nq2 is permitted to discard n, which will alter the stack effect." :doc

: whend   ( nqq-? )
  [ over swap do ] dip swap
  [ nip do -1 ] [ drop 0 ] if 0; pop 2drop ;
" ( nqq-? ) Execute q1, with a copy of n on the stack.\n\nIf q1 returns a true flag, drop n, run q2 and exit the caller.\n\nIf not, discard q2 and return to the caller. " :doc

{{
  : for   ( R: n-  C: -a ) here ` push ; compile-only
  : next  ( R: -   C: a- ) ` pop 7 , , ; compile-only
  : i 2pop pop 2over 2push swap - swap push ;
  : tors  (    -n ) ` pop ` dup ` push ; compile-only
---reveal---
  : times (  nq-  )
    over 1 >= [ swap for dup dip next drop ] [ 2drop ] if ;
  " ( nq- ) Run quote (n) times" :doc

  : iterd (  nq-  )
    over 1 >= [ swap for tors swap dup dip next drop ] [ 2drop ] if ;
  " ( nq- ) Run quote (n) times and push counter to stack each time. Counts down." :doc

  : iter  (  nq-  )
    over 1 >= [ swap dup push for i swap dup dip next pop 2drop ] [ 2drop ] if ;
  " ( nq- ) Run quote (n) times and push counter to stack each time. Counts up." :doc
}}

{{
  : each   (  qa- ) [ [ swap dup &do dip ] sip 1+ ] times 2drop ;
  : array  (  aq- ) swap @+ dup 1 > [ each ] [ 2drop ] if ;
  : buffer ( anq- ) 2rot each ;
  : list   (  lq- ) [ &@ dip 2over [ &do dip ] dip over @ ] while 2drop ;
---reveal---
  : <each@> ( ...t- ) drop ;
  " ( ...t- ) Hook into **each@** for adding additional types" :doc

  : each@   ( ...t- )
    [ 0  ( ARRAY  ) == ] &array                     whend
    [ 1  ( BUFFER ) == ] &buffer                    whend
    [ 2  ( STRING ) == ] [ &withLength dip buffer ] whend
    [ 3  ( LIST   ) == ] &list                      whend
    <each@> ;
  " ( ...t- ) Supercombinator for applying a quote to each item in various data structures.\nProvide one of the following stack forms:\n\n    ARRAY:  aq-\n    BUFFER: anq-\n    STRING: $q-\n    LIST: lq-\n\nFor LIST, *l* should be a variable pointing to the list.\n\nThe quote will be given the address of the current element with each time it is invoked by each@." :doc
}}

( Memory Blocks ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: copy   ( aan-  ) [ &@+ dip !+ ] times 2drop ;
" ( aan- ) Copy n values from source (a1) to dest (a2)" :doc

: fill   ( ann-  ) swap !here [ @here swap !+ ] times drop ;
" ( ann- ) Fill (n2) memory locations starting at (a) with value (n1)" :doc

( Conditionals ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: ahead  (   -a  ) 8 , here 0 , ;
" ( -a ) Used in conditionals; compiles a branch to be patched in later" :doc

: if;    (  f-   ) ` not ` 0; ` drop ; compile-only
" ( f- ) Exit function if TOS is a non-zero flag" :doc

: within ( xlu-f ) &over dip <= &>= dip and ;
" ( xlu-f ) Is (x) within lower (l) and upper (u) bounds?" :doc

( Data Structures ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: variable:  ( n"-  ) create , ;
" ( n``- ) Create a new variable with an initial value " :doc

: variable   (  "-  ) 0 variable: ;
" ( ``- ) Create a new variable with an initial value of 0" :doc

: constant   ( n"-  ) create @last !d->xt ;
" ( n``- ) Create a numeric constant" :doc

: string:    ( $"-  ) keepString constant ;
" ( $``- ) Create a string constant" :doc

: allot      (  n-  ) dup 0 < [ +heap ] [ [ 0 , ] times ] if ;
" ( n- ) Allocate space in the heap" :doc

{{
  : list     (  n-a ) here swap allot ;
  : element  (  a-a ) create dup @last !d->xt 1+ ;
---reveal---
  : elements ( n"-  ) dup list swap &element times drop ;
  " ( n``- ) Create a series of variables" :doc
}}

( Numbers and Math ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: decimal ( - ) 10 !base ;
" ( - ) Switch **base** to 10" :doc

: hex     ( - ) 16 !base ;
" ( - ) Switch **base** to 16" :doc

: octal   ( - )  8 !base ;
" ( - ) Switch **base** to  8" :doc

: binary  ( - )  2 !base ;
" ( - ) Switch **base** to  2" :doc

( Output ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  create buf   32 allot
  2 elements digits pos
  : split    (   n-... )
    repeat @base /mod swap numbers + @ swap digits ++ 0; again ;
  : build    ( ...-    )
    buf @pos [ @pos swap !+ ] ifTrue
    @digits [ !+ ] times 0 swap ! ;
  : negate?  (   n-n   ) dup 0 >= if; negate 45 !pos ;
---reveal---
  : (toString) (   n-$   ) 0 [ !pos ] [ !digits ] bi negate? split build buf ;
  : toString ( n-$ ) (toString) ;
  " ( n-$ ) Convert a number into a string" :doc
}}

: clear (  - ) -1 putc ;
" ( - ) Clear the display" :doc

: space (  - ) 32 putc ;
" ( - ) Display a space character (ASCII 32)" :doc

: putn  ( n- ) toString puts ;
" ( n- ) Display a number" :doc

( Parsing prefixes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: .parse  (  a- ) do ;
" ( a- ) Class for parsing prefixes" :doc

: parsing (   - ) &.parse reclass ;
" ( - ) Set most recent function to **.parse** class" :doc

{{
  : number ( a- ) base [ do toNumber .data ] preserve ;
---reveal---
  : __$   ( $-n ) &hex     number ; parsing
  " ( $-n ) Prefix; treat number as hexadecimal (base" :doc

  : __#   ( $-n ) &decimal number ; parsing
  " ( $-n ) Prefix; treat number as decimal (base 10)" :doc

  : __%   ( $-n ) &binary  number ; parsing
  " ( $-n ) Prefix; treat number as binary (base 2)" :doc

  : __'   ( $-n ) @ .data         ; parsing
  " ( $-n ) Return character following '" :doc
}}


( Chained Vocabularies ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
create dicts 64 allot
" ( -a ) Array; used by chained vocabularies and search order code" :doc

{{
  2 elements active prior
  create "|" 124 ,  0 ,
  create "%%" 37 , 37 , 0 ,
  : seal   (  - ) last [ @ 0; @active over @ == ] until 0 swap ! ;
  : revert (  - ) @prior 0; !last 0 !prior ;
  : safety (  - ) "%%" header immediate &revert @last !d->xt ;
---reveal---
  : %%     (  - ) revert ;
  " ( - ) Close a vocabulary. Use with caution" :doc

  : <%>    ( a- ) @last !prior !last ;
  " ( a- ) Open a vocabulary. Use with caution" :doc

  : .chain ( a- ) @dicts &drop &<%> if ;
  " ( a- ) Class for vocabularies" :doc

  : chain: ( "- ) create 0 , &.chain reclass @last !active safety ;
  " ( ``- ) Create a new vocabulary" :doc

  : ;chain (  - ) seal @last @active [ !last ] [ !d->xt ] bi ;
  " ( - ) End a vocabulary" :doc

  : :with  ( a- ) 0; @dicts 1+ dicts + ! dicts ++ ;
  " ( a- ) Add a vocabulary to the search order (by pointer)" :doc

  : with   ( "- ) ' :with ;
  " ( ``- ) Add a vocabulary to the search order (parses for name)" :doc

  : without ( - ) @dicts 0; 1- !dicts ;
  " ( - ) Remove a vocabulary from the search order " :doc

  : global  ( - ) 0 !dicts ;
  " ( - ) Remove all vocabularies from the search order, leaving just the global dictionary " :doc

  : findInChain ( $a-df ) :with find without ;
  " ( $a-df ) Open a chain (using **:with**) and search for a name. Closes the chain when done." :doc

  : with|  ( "- )
    global
    repeat
      32 accept tib "|" compare if;
      tib find [ @d->xt :with ] &drop if
    again ;
  " ( ``- ) Open a series of vocabularies, ending when ``  is encountered" :doc
}}

: rename: ( a"- )
  create dup xt->d swap :hide
  [ @d->xt @last !d->xt ] [ @d->class @last !d->class ] bi ;
" ( a``- ) Rename a function" :doc

( Extend 'find' and 'xt->d' to search chains before global ~~~~~~~~~~~~~~~~~~ )
{{
  5 elements flag dt name safety xt
  : search  (  -   ) @dicts repeat 0; dup dicts + <%> @xt do 1- again ;
  : (chains ( $-   ) !name 0 [ !dt ] [ !flag ] bi @last !safety ;
  : back)   (   -  ) @safety !last ;
  : seek    ( na-n ) @name default: find [ !dt flag on drop 1 ] &drop if ;
  : lookup  ( $-af )
    &seek !xt (chains search back)
    @flag [ @dt @flag ] [ @name default: find ] if ;
  &lookup is find

  : seek    (   -  )
    @name default: xt->d ?dup [ !dt flag on drop 1 ] ifTrue ;
  : lookup  (  a-d )
    &seek !xt (chains search back)
    @flag [ @dt ] [ @name default: xt->d ] if ;
  &lookup is xt->d
}}

( Extend Prefix Handler ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  4 elements xt class name flag
  create ___ 95 , 95 , 95 , 0 ,

  ( Split Token into Prefix and Name ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : action   (  -   ) @xt @class withClass ;
  : (split   (  -a  ) @+ ___ tuck 1+ 1+ ! swap !name ;
  : prefix)  ( $-f  )
    find [ [ @d->class !class ] [ @d->xt !xt ] bi -1 ] [ 0 ] if ;

  ( Prefix Handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : handle   (  -   )
    @class &.parse ==
    [ flag off @name action ]
    [ @name find [ @d->xt action flag off ] &drop if ]
    if ;

  ( Main Wrapper ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : try      (  -   )
    flag on tib (split prefix) &handle &drop if @flag ;
  &try is <notFound>
}}

( Core Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : buffers  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch )
    STRING-BUFFERS STRING-LENGTH * -  ( buffers ) ;
  variable next
---reveal---
  : tempString ( $-$ )
    withLength 1+
    @next STRING-BUFFERS == [ 0 !next ] ifTrue
    @next STRING-LENGTH * buffers + [ swap copy ] sip
    next ++ ;
  " ( a-a ) Move a string to a temporary buffer" :doc
}}

[ (toString) tempString ] is toString
hide (toString)
hide "   ( next we define __" and can use proper strings )

{{
  variable end
  : pad  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch ) ;
  : keep    (  -  ) @compiler &keepString &tempString if .data ;
  : >pad    ( $-$ ) pad over getLength 1+ copy pad keep ;
  : chop    ( $-$ ) end -- 0 @end ! ;
  : >$      ( n-  ) dup 8 == [ chop drop ] [ @end !+ !end ] if ;
  : end?    ( $-$ ) @end @1- '" == [ chop >pad -1 ] [ 0 ] if ;
  : noEat   ( q-  ) eatLeading? off do eatLeading? on ;
  : withPad ( q-  ) 32 pad 1- ! &pad &tib :is noEat &tib :devector ;
  : get     (  -c ) getc (echo) ;
---reveal---
  : __"  ( "-a )
    dup withLength + !end
    end? [ 32 >$ [ end? [ 0 ] [ get >$ -1 ] if ] while ] ifFalse ; parsing
  "( ``-$ ) Prefix; parse and return a string" :doc

  : "    ( "-$ ) [ '" accept pad 1- keep ] withPad ; immediate
  "( ``-$ ) Parse and return a string" :doc
}}

( Formatted String Display ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
-1 variable: formatted
"( -a ) Variable; toggles whether **puts** uses escape sequences or not" :doc

{{
  : withBase ( n$q-$ ) &swap dip base &do preserve ;
  : char ( $-$ )
    @+ [ 'n == ] [ cr      ] whend
       [ '' == ] [ '" putc ] whend
       [ '[ == ] [ 27 putc putc ] when
    putc ;
  : obj  ( $-$ )
    @+ [ 'd == ] [ [ decimal putn ] withBase ] whend
       [ 'o == ] [ [ octal   putn ] withBase ] whend
       [ 'x == ] [ [ hex     putn ] withBase ] whend
       [ 'c == ] [ swap putc                 ] whend
       [ 's == ] [ formatted off &puts dip formatted on ] whend
       putc ;
  : complex ( $-n )
    repeat
      @+ 0;
      dup '\ == [ drop char 0 ] ifTrue
      dup '% == [ drop obj  0 ] ifTrue
      putc
    again ;
  : simple ( $- ) [ @ putc ] 2 ( STRING ) each@ ;
  [ update off @formatted [ complex drop ] &simple if update on redraw ] is <puts>
}}

( Debugging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: depth   (    -n ) -5 5 out wait 5 in ;
"( -n ) Return number of items on stack" :doc

: reset   ( ...-  ) depth repeat 0; 1- nip again ;
"( ...- ) Remove all items from stack" :doc

{{
  : (.s)  0; 1- swap push (.s) pop dup putn space ;
---reveal---
  : .s    depth [ "\n<%d> " puts ] sip (.s) ;
  "( - ) Display all items on stack" :doc
}}

{{
  : list    ( a-  ) [ d->name puts space ] 3 ( ^types'LIST ) each@ ;
  : others  (  -  ) @dicts repeat 0; cr dup dicts + list 1- again ;
---reveal---
  : words   (  -  ) cr formatted dup [ off others cr last list ] preserve ;
  "( - ) List all names in dictionary" :doc
}}


( Keymap ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

{{
  : dictionary.find/xt ( string:name - xt )  find [ @d->xt ] [ drop #0 ] if ;

  : prefix?
    dup "keymap:PREFIX" dictionary.find/xt @ == ;

  : seekHandler
    dup "keymap:TABLE"  dictionary.find/xt + @ ;

  [ prefix? [ drop getc:unfiltered seekHandler dup 0 <> [ nip dip cr ] [ 2drop ] if 0 ] ifTrue ] is keymap:handler
}}

( Misc. Words ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: getToken ( "-$ ) 32 accept tib tempString ;
"( ``-$ ) Read a string, stopping at first whitespace" :doc

: getNumber ( "-n )  getToken toNumber ;
"( ``-n ) Read a number from the input stream" :doc

: :include ( $-  ) 2 4 out wait ;
"( $- ) Include a file" :doc

: include  ( "-  ) getToken :include ;
"( ``- ) Same as **:include**, but parse for file name" :doc

: time     (  -n ) -8 5 out wait 5 in ;
"( -n ) Return the current unix time" :doc

: delay    ( n-  ) time + [ dup time > ] while drop ;
"( n- ) Delay for (approximately) n seconds" :doc

: getEnv   ( a$- ) -10 5 out wait ;
"( a$- ) Get a copy of environment variable $ in buffer" :doc

: later    (  -  ) 2pop swap 2push ;
"( - ) Defer execution of caller until a later time" :doc

{{
  : xt,   ( - ) 1 , @last @d->xt , ;
---reveal---
  : yield ( - ) 1 , here 5 + , xt, ` :is 9 , xt,  ` :devector ; compile-only
  "( - ) Return from a function, with execution resuming from point after **yield** when the  function is next called" :doc
}}

: doc{     ( "-  ) repeat getToken "}doc" compare if; again ;
"( ``- ) Parse tokens up to *}doc* and ignore.\n\nThis is intended as a means of embedding docs into libraries." :doc

: variables|  ( "- )
  repeat getToken "|" compare if; tib header 0 , again ;
"( ``- ) Create a series of variables" :doc

( Internal Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
global
chain: internals'
  &quote  create quote  @last !d->xt &.word reclass
  "( -a ) Helper function for quotations" :doc

  &string create string @last !d->xt &.word reclass
  "( -a ) Helper function for strings" :doc
;chain
"( - ) vocabulary containing functions used internally by Retro" :doc

hide string
hide quote

( Generic Buffer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
global
chain: buffer'
{{
  variables| buffer ptr |
  : terminate (  -  ) 0 @ptr ! ;
---reveal---
  : start     (  -a ) @buffer  ;
  "( -a ) Get starting address of buffer" :doc

  : end       (  -a ) @ptr     ;
  "( -a ) Address at end of buffer" :doc

  : add       ( c-  ) end ! ptr ++ terminate ;
  "( c- ) Add value to end of buffer" :doc

  : get       (  -c ) ptr -- end @ terminate ;
  "( -c ) Read and remove value from buffer" :doc

  : empty     (  -  ) start !ptr   terminate ;
  "( - ) Remove everything from the buffer" :doc

  : size      (  -n ) end start -   ;
  "( -n ) Number of values in buffer" :doc

  : set       ( a-  ) !buffer empty ;
  "( a- ) Set buffer to memory address and empty it" :doc

  : preserve  ( q- )  @ptr [ @buffer [ do ] dip !buffer ] dip !ptr ;
  "( q- ) Save and restore buffer settings while executing a quote" :doc
}}
;chain
"( - ) vocabulary for dealing with LIFO buffers" :doc

( Text Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
with buffer'
chain: strings'
{{
  variables| len needle haystack flag right left src |
  : buffer  ( -a )
    @memory        STRING-LENGTH   -  ( tib     )
                   STRING-LENGTH   -  ( scratch ) ;
  : trim   ( $-$ )
    dup withLength + 1- dup @ 32 == [ 0 swap ! dup 1- -- trim ] &drop if ;
  : place  ( $$n- ) [ copy 0 ] sip here + ! ;
  : prep   (  $$- ) swap !haystack [ getLength !len ] [ !needle ] bi 0 !flag ;
  : move   (    - ) @haystack here @len place haystack ++ ;
  : cmp    (    - )
    @flag 0 != if; @needle here compare [ @haystack 1- !flag ] ifTrue ;
---reveal---
  : search   ( $$-f )
    flag off prep @haystack getLength [ move cmp ] times @flag ;
  "( $$-f ) Search for a string (2) within a string (1); return string starting with substring" :doc

  : findChar ( $c-a )
    !needle
    repeat @+
      dup 0   == [ 2drop 0 0 ] [ -1 ] if 0; drop
      @needle == [ 1-      0 ] [ -1 ] if 0; drop
    again ;
  "( $c-a ) Search for a character within a string; return string starting at the character" :doc

  : chop      ( $-$ ) tempString withLength over + 1- 0 swap ! ;
  "( $-$ ) Return a new string, with the last byte removed" :doc

  : getSubset ( $nn-$ )
    buffer 0 STRING-LENGTH fill
    !right !left !src
    @src @left + @right buffer swap copy buffer tempString ;
  "( $nn-$ ) Return a subset of ($) starting at (n1) with length of (n2)" :doc

  : trimLeft  ( $-$ ) [ @+ [ 32 == ] [ 0 != ] bi and ] while 1- ;
  "( $-$ ) Trim whitespace from left side of string" :doc

  : trimRight ( $-$ )
    buffer [ 0 STRING-LENGTH fill ] [ over getLength copy ] [ trim ] tri tempString ;
  "( $-$ ) Trim whitespace from right side of string" :doc

  : prepend ( $$-$ )
    buffer 0 STRING-LENGTH fill
    withLength buffer swap &copy sip
    &withLength dip buffer + swap copy buffer tempString ;
  "( $$-$ ) Append first string to second" :doc

  : append ( $$-$ ) swap prepend ;
  "( $$-$ ) Append second string to first" :doc

  : appendChar ( $c-$ ) swap tempString [ withLength + !+ 0 swap ! ] sip ;
  "( $c-$ ) Append character to a string" :doc

  : toLower  ( $-$ )
    tempString [ [ dup @ dup 'A 'Z within [ 32 + ] ifTrue swap ! ] 2 each@ ] sip ;
  "( $-$ ) Convert a string to all upper case" :doc

  : toUpper  ( $-$ )
    tempString [ [ dup @ dup 'a 'z within [ 32 - ] ifTrue swap ! ] 2 each@ ] sip ;
  "( $-$ ) Convert a string to all upper case" :doc
}}
  : reverse ( $-$ )
    dup tempString set
    &getLength [ withLength + 1- ] bi swap
    [ dup @ add 1- ] times drop
    start tempString ;
  "( $-$ ) Reverse the characters in a string; returns a new string" :doc

  : split ( $n-$$ )
    2over 0 swap getSubset &+ dip ;
  "( $n-$$ ) Split a string into two parts" :doc

  : splitAtChar ( $c-$$ )
    2over over swap findChar over - 1+ 0 swap getSubset [ findChar 1+ ] dip ;
  "( $c-$$ ) Search for a character and return two strings (up to and including (c), and after ($2))" :doc

  : splitAtChar: ( $"-$$ )
    @getToken .data ` splitAtChar ; immediate
  "( $``-$$ ) Parse for a character and call **splitAtChar**" :doc
;chain
without
"( - ) vocabulary with functions for dealing with strings" :doc

( Access Words Within Chains Directly ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
with strings'
: __^  ( "- )
  splitAtChar: ' find
  [ @d->xt findInChain [ [ @d->xt ] [ @d->class ] bi withClass ] &drop if ]
  &drop if ; parsing
"( ``- ) Allow direct access to functions in a chain" :doc

: :needs  ( $- )
  dup find nip
  &drop [ "library/" prepend chop ".rx" append :include ] if ;
"( $- ) Load a vocabulary from the library if not already loaded" :doc

: needs  ( "- )
  getToken :needs ;
"( ``- ) Load a vocabulary from the *library* if it is not already loaded (parsing)" :doc

 without

( types' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
chain: types'
  0 constant ARRAY  ( -n )
  "( -n ) Type constant for arrays" :doc

  1 constant BUFFER ( -n )
  "( -n ) Type constant for buffers" :doc

  2 constant STRING ( -n )
  "( -n ) Type constant for strings" :doc

  3 constant LIST   ( -n )
  "( -n ) Type constant for linked lists" :doc
;chain
"( - ) vocabulary with constants for data types. Used with **each@**" :doc

: describe
  d' 0; cr
  dup d->class @ xt->d dup [ d->name ] [ drop "unknown" ] if "class: %s\n" puts
      d->doc @ dup [ ] [ drop "no documentation provided" ] if puts cr ;
"( ``- ) provide information about a function" :doc

[ ^strings'toUpper default: __$ ] is __$

( cleanup and save ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
global .s save bye
